{"ast":null,"code":"var _jsxFileName = \"/home/kshitij/Documents/Xenia_mcq_platform/src/components/answer/answer.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport \"./answer.styles.scss\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport styled from \"styled-components\";\nimport { getSelectedQuestionAnswers, getSelectedQuestion } from \"../../redux/question/question.selector\";\nimport { setSelectedAnswer } from \"../../redux/question/question.actions\";\nimport cyan from \"@material-ui/core/colors/cyan\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledRadio = styled(Radio)`\n  color: ${cyan[400]};\n  &.Mui-checked {\n    color: ${cyan[600]};\n  }\n`;\n_c = StyledRadio;\n\nconst RadioButtonsGroup = function ({\n  answers,\n  selectedQuestion,\n  setSelectedAnswer\n}) {\n  _s();\n\n  const selectedAnswer = selectedQuestion.selectedAnswer;\n  const [value, setValue] = React.useState({\n    selectedAnswer\n  });\n\n  const handleChange = event => {\n    setValue(event.target.value);\n    setSelectedAnswer(event.target.value);\n  }; //{answers[0].text}\n  //{answers[1].text}\n  //{answers[2].text}\n  //{answers[3].text}\n\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    component: \"fieldset\",\n    className: \"styling vertical-center-row\",\n    children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n      \"aria-label\": \"options\",\n      name: \"gender1\",\n      value: value,\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: \"1\",\n        control: /*#__PURE__*/_jsxDEV(StyledRadio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 20\n        }, this),\n        label: \"Random Option Random Option Random Option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: \"2\",\n        control: /*#__PURE__*/_jsxDEV(StyledRadio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 20\n        }, this),\n        label: \"Random Option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: \"3\",\n        control: /*#__PURE__*/_jsxDEV(StyledRadio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 20\n        }, this),\n        label: \"Random Option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        value: \"4\",\n        control: /*#__PURE__*/_jsxDEV(StyledRadio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 20\n        }, this),\n        label: \"Random Option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RadioButtonsGroup, \"+ocmgouxe6jqg5TaCWpL3ywck2Q=\");\n\n_c2 = RadioButtonsGroup;\nconst mapStateToProps = createStructuredSelector({\n  answers: getSelectedQuestionAnswers,\n  selectedQuestion: getSelectedQuestion\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setSelectedAnswer: num => dispatch(setSelectedAnswer(num))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RadioButtonsGroup);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledRadio\");\n$RefreshReg$(_c2, \"RadioButtonsGroup\");","map":{"version":3,"sources":["/home/kshitij/Documents/Xenia_mcq_platform/src/components/answer/answer.component.jsx"],"names":["React","Radio","RadioGroup","FormControlLabel","FormControl","Typography","FormLabel","connect","createStructuredSelector","styled","getSelectedQuestionAnswers","getSelectedQuestion","setSelectedAnswer","cyan","StyledRadio","RadioButtonsGroup","answers","selectedQuestion","selectedAnswer","value","setValue","useState","handleChange","event","target","mapStateToProps","mapDispatchToProps","dispatch","num"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport \"./answer.styles.scss\";\n\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport styled from \"styled-components\";\nimport {\n  getSelectedQuestionAnswers,\n  getSelectedQuestion,\n} from \"../../redux/question/question.selector\";\nimport { setSelectedAnswer } from \"../../redux/question/question.actions\";\nimport cyan from \"@material-ui/core/colors/cyan\";\n\nconst StyledRadio = styled(Radio)`\n  color: ${cyan[400]};\n  &.Mui-checked {\n    color: ${cyan[600]};\n  }\n`;\nconst RadioButtonsGroup = function ({\n  answers,\n  selectedQuestion,\n  setSelectedAnswer,\n}) {\n  const selectedAnswer = selectedQuestion.selectedAnswer;\n  const [value, setValue] = React.useState({ selectedAnswer });\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n    setSelectedAnswer(event.target.value);\n  };\n  //{answers[0].text}\n  //{answers[1].text}\n  //{answers[2].text}\n  //{answers[3].text}\n  return (\n    <FormControl component=\"fieldset\" className=\"styling vertical-center-row\">\n      <RadioGroup\n        aria-label=\"options\"\n        name=\"gender1\"\n        value={value}\n        onChange={handleChange}\n      >\n        {/* <<<<<<< HEAD */}\n        {/* <FormControlLabel\n          value=\"1\"\n          control={<Radio />}\n          label={\n            <span style={{ width: 40 }}>\n              Hello Randrom Option Hello Randrom Option Hello Randrom Option\n              Hello Randrom Option Hello Randrom Option{\" \"}\n            </span>\n          }\n        />\n\n        <FormControlLabel value=\"2\" control={<Radio />} label=\"Random Option\" />\n        <FormControlLabel value=\"3\" control={<Radio />} label=\"Random Option\" />\n        <FormControlLabel value=\"4\" control={<Radio />} label=\"Random Option\" /> */}\n        {/* ======= */}\n        <FormControlLabel\n          value=\"1\"\n          control={<StyledRadio />}\n          label=\"Random Option Random Option Random Option\"\n        />\n        <FormControlLabel\n          value=\"2\"\n          control={<StyledRadio />}\n          label=\"Random Option\"\n        />\n        <FormControlLabel\n          value=\"3\"\n          control={<StyledRadio />}\n          label=\"Random Option\"\n        />\n        <FormControlLabel\n          value=\"4\"\n          control={<StyledRadio />}\n          label=\"Random Option\"\n        />\n\n        {/* >>>>>>> 37a20a9e73339f19da59bac39c0b051dd5689f58 */}\n      </RadioGroup>\n    </FormControl>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  answers: getSelectedQuestionAnswers,\n  selectedQuestion: getSelectedQuestion,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setSelectedAnswer: (num) => dispatch(setSelectedAnswer(num)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RadioButtonsGroup);\n"]},"metadata":{},"sourceType":"module"}